{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","items","itemsSet","inputValue","inputValueSet","console","log","className","type","value","onChange","evt","target","onClick","map","item","index","style","fontSize","slice","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAAe,I,YCyDAA,MArDf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEuBF,mBAAS,MAFhC,mBAENG,EAFM,KAEMC,EAFN,KAOb,OAHAC,QAAQC,IAAI,sBAAuBH,GACnCE,QAAQC,IAAI,gBAAiBL,GAG3B,sBAAKM,UAAU,MAAf,UACE,8CACA,uBAAOC,KAAM,OAAOC,MAAON,EAAYO,SACrC,SAACC,GACCP,EAAcO,EAAIC,OAAOH,UAK7B,wBAAQI,QACN,WACEX,EAAS,GAAD,mBAAKD,GAAL,CAAYE,KACpBC,EAAc,KAHlB,uBAOC,8BACE,6BACGH,EAAMa,KAAI,SAACC,EAAMC,GAChB,OACE,qBACAC,MACE,CACEC,SAAU,IAHd,UAMEH,EACF,wBAAQF,QACN,WACCX,EAAS,GAAD,mBACHD,EAAMkB,MAAM,EAAGH,IADZ,YAEHf,EAAMkB,MAAMH,EAAOf,EAAMmB,YAJjC,0CC3BAC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.66a33a67.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport { useState } from 'react';\n\nfunction App() {\n  const [items, itemsSet] = useState([])\n  const [inputValue, inputValueSet] = useState(null)\n\n  console.log(\"this is input value\", inputValue)\n  console.log(\"this is items\", items)\n\n  return (\n    <div className=\"App\">\n      <h1>Hello World!</h1>\n      <input type =\"text\" value={inputValue} onChange = {\n        (evt) => { \n          inputValueSet(evt.target.value) \n \n        }\n      }\n      />\n      <button onClick = {\n        () => {\n          itemsSet([...items, inputValue])\n          inputValueSet(\"\")\n        }\n      }\n       > add Todo</button>\n       <div>\n         <ul>\n           {items.map((item, index) => {\n             return (\n               <li\n               style = {\n                 {\n                   fontSize: 24\n                 }\n               }\n               >{item}\n               <button onClick = {\n                 () => {\n                  itemsSet([\n                    ...items.slice(0, index),\n                    ...items.slice(index, items.length)\n                  ])\n                 }\n               }    > delete to do </button>\n               </li>\n             )\n           }\n           ) }\n         </ul>\n       </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}